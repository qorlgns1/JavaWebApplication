**제어문 사용
1.무한 반복
1)while(true){
	내용;
}

2)do{
	내용;
}while(true);

3)for(;;){
	내용;
}

2.제어문을 만들 때 ;에 유의
if(조건);{ }  //else가 있으면 에러이고 else 가 없으면 if가 없는 것 과 같음
switch(변수);{ } //에러
while(조건);{ } //반복하지 않고 1번만 수행
for(초기식;조건식;두번째부터반복할식);{ } //반복하지 않고 1번만 수행

괄호 뒤에 ;을 하는 경우에는 do{내용}while(조건); 

3.내용이 한 줄 인 경우는 { }를 생략하는 것이 가능
=>생략하지 않는 것을 권장
score가 60이상이라면 합격이라고 출력
if(score >= 60){
	System.out.println("합격");
}

=>{ }안의 내용이 한 줄 이라서 { } 생략 가능
if(score >= 60)
	System.out.println("합격");

4.제어문 안에서 변수는 제어문 안에서만 사용이 가능
int cnt = 0;
for(int idx=0; idx<3; idx=idx+1){
	int sum = 0;
}

System.out.println(cnt);
System.out.println(idx); //에러
System.out.println(sum); //에러

5.제어문 안에 제어문을 사용할 수 있습니다.
=>scope 의 법칙
쌍으로 만들어져야 하는 구문은 가까이 에서 만든 것과 결합
영역이 다르면 동일한 이름을 가지고 기능을 부여해도 됩니다.
여러 곳에서 이름을 만든 경우 가까이에서 만든 이름을 먼저 찾습니다.

for(int idx=0; idx<5; idx=idx+1){

}

for(int idx=0; idx<5; idx=idx+1){

}

int x = 10;
for(int x=1; x<5;x=x+1){
	System.out.println(x); //1,2,3,4,5
}
System.out.println(x); //10

**break 와 continue
1.break
=>반복문 안에서 분기문(if 인 경우가 많음)과 함께 사용해서 반복문을 종료하는 기능을 가진 명령어

for(int i=0; i<5; i=i+1){
	내용
	//조건이 true가 되면 break를 만나서 반복문을 종료
	if(조건){
		break;
	}
}
=>switch에서 조건 없이 사용해서 switch 구문을 빠져나감

2.continue
=>반복문에서 분기문과 함께 사용되서 다음 반복으로 넘어가는 역할
for(int i=0; i<5; i=i+1){
	//조건이 true가 되면 continue를 만나서 내용을 수행하지 않고 다음 반복으로 넘어감
	if(조건){
		continue;
	}

	내용
}

while(9월 14일 까지){
	하루씩 증가
	if(토요일 이나 일요일 또는 공휴일){
		continue;
	}

	학원에 갑니다.
	
}


**연습
System.out.print("*"): 별 1개 출력
System.out.print("\n"): 줄 바꿈

*****
*****
*****
*****
*****
for(int i=0; i<=4; i=i+1){
	for(int j=0; j<=4; j=j+1){
		System.out.print("*");
	}
	System.out.print("\n");
}

*       	0-0
**      	0-1
***     	0-2
****	0-3
*****	0-4
데이터 개수가 0,1,2,3,4로 1개씩 늘어납니다.
1 * i (변화량 * i를 하고 첫번째 i를 대입해서 개수가 맞는 지 계산을 하고 계산을 해서 개수가 맞지 않으면 개수가 맞도록 더하기나 빼기를 해주면 됩니다.)
for(int i=0; i<=4; i=i+1){
	for(int j=0; j<=i; j=j+1){
		System.out.print("*");
	}
	System.out.print("\n");
}

*       	0-0
***      	0-2
*****     	0-4
*******	0-6
*********	0-8
데이터 개수가 0,2,4,6,8로 2개씩 늘어납니다.
2 * i (변화량 * i를 하고 첫번째 i를 대입해서 개수가 맞는 지 계산을 하고 계산을 해서 개수가 맞지 않으면 개수가 맞도록 더하기나 빼기를 해주면 됩니다.)
for(int i=0; i<=4; i=i+1){
	for(int j=0; j<=2*i; j=j+1){
		System.out.print("*");
	}
	System.out.print("\n");
}

*****       0-4
****      	0-3
***     	0-2
**	0-1
*	0-0
데이터 개수가 4,3,2,1,0 으로 1개씩 줄어듭니다.
-1 * i + 4(변화량 * i를 하고 첫번째 i를 대입해서 개수가 맞는 지 계산을 하고 계산을 해서 개수가 맞지 않으면 개수가 맞도록 더하기나 빼기를 해주면 됩니다.)
for(int i=0; i<=4; i=i+1){
	for(int j=0; j<=-1 * i + 4; j=j+1){
		System.out.print("*");
	}
	System.out.print("\n");
}

*       	0-0
**      	0-1
***     	0-2
**	0-1
*	0-0
이렇게 반복구조 안에서 패턴이 변경되는 경우에는 패턴이 변경되는 지점에서 분할을 해서 해결합니다.
복잡한 문제가 주어지면 해결할 수 있는 단위로 분할을 하고 분할을 해서 해결한 후 하나로 합치면 됩니다.


for(int i=0; i<=4; i=i+1){
	//3번째 줄 까지 적용
	if(i <= 2){
		for(int j=0; j<=i; j=j+1){
			System.out.print("*");
		}
	}
	//나머지 줄에 적용할 내용
	else{
		for(int j=0; j<= 4-i; j=j+1){
			System.out.print("*");
		}
	}

	System.out.print("\n");
}

    *       	0-3	0-0
   **      	0-2	0-1
  ***     	0-1	0-2
 ****	0-0	0-3
*****	없음	0-4
한 줄에 공백을 출력하고 별을 출력하는 형태가 같이 존재
반복문을 2개 사용하면 됩니다.
공백은 하나씩 줄어들고 별은 하나씩 늘어납니다.

for(int i=0; i<=4; i=i+1){
	//공백 출력
	for(int j=0; j<=3-i; j=j+1){
		System.out.print(" ");
	}
	//별 출력
	for(int j=0; j<=i; j=j+1){
		System.out.print("*");
	}

	System.out.print("\n");
}

연습문제
  *
 **
***
 **
  *

이번주 문제 - 한글과 컴퓨터 코딩 테스트 문제 
    0		앞에 공백 4개
   1 2		앞에 공백 3개 중간 공백 1개
  3   4		앞에 공백 2개 중간 공백 3개
 5     6		앞에 공백 1개 중간 공백 5개
789012345	공백없이 숫자 9개
=>숫자는 0부터 9까지 진행하고 다시 0으로 돌아와야 합니다.
=>첫번째 와 마지막은 예외형태로 구현해야 합니다.
  
    *
   * *
  *   *
 *     *
*********










